#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_ARGS 10

// Function prototypes
void parse_command(char *command, char **args);
void execute_command(char **args);

int main() {
    char command[MAX_COMMAND_LENGTH];
    char *args[MAX_ARGS];

    while (1) {
        printf("MiniShell> ");
        fflush(stdout); // Flush stdout to ensure prompt is displayed

        // Read command from stdin
        if (fgets(command, MAX_COMMAND_LENGTH, stdin) == NULL) {
            perror("fgets failed");
            exit(EXIT_FAILURE);
        }

        // Remove newline character from the end of the command
        command[strcspn(command, "\n")] = '\0';

        // Parse command into arguments
        parse_command(command, args);

        // Execute command
        execute_command(args);
    }

    return 0;
}

// Function to parse command into arguments
void parse_command(char *command, char **args) {
    char *token;
    int i = 0;

    // Tokenize command based on whitespace
    token = strtok(command, " ");

    while (token != NULL && i < MAX_ARGS - 1) {
        args[i++] = token;
        token = strtok(NULL, " ");
    }

    args[i] = NULL; // Null-terminate the argument list
}

// Function to execute the command
void execute_command(char **args) {
    pid_t pid;
    int status;

    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        if (execvp(args[0], args) == -1) {
            perror("Execution failed");
            exit(EXIT_FAILURE);
        }
    } else {
        // Parent process
        do {
            waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }
}
